import { Request, Response, NextFunction } from 'express';
import { PrismaClient } from '@prisma/client';
import { createError } from '../middleware/errorHandler';
import axios from 'axios';

const prisma = new PrismaClient();

// –ö–µ—à –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
const deliveryCache = new Map<string, any>();
const addressCache = new Map<string, any>(); // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–µ—à –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤
const CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
const ADDRESS_CACHE_TTL = 2 * 60 * 1000; // 2 –º–∏–Ω—É—Ç—ã –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤

// –°—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
let activeDeliveryRequests = 0;
const MAX_CONCURRENT_DELIVERY_REQUESTS = 5;

// –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫–µ—à–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
setInterval(() => {
  const now = Date.now();
  let cleanedCount = 0;
  
  // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
  for (const [key, value] of deliveryCache.entries()) {
    if ((now - value.timestamp) > CACHE_TTL) {
      deliveryCache.delete(key);
      cleanedCount++;
    }
  }
  
  // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∞–¥—Ä–µ—Å–æ–≤
  for (const [key, value] of addressCache.entries()) {
    if ((now - value.timestamp) > ADDRESS_CACHE_TTL) {
      addressCache.delete(key);
      cleanedCount++;
    }
  }
  
  if (cleanedCount > 0) {
    console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${cleanedCount} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫–µ—à–∞ –¥–æ—Å—Ç–∞–≤–∫–∏`);
  }
}, 10 * 60 * 1000); // 10 –º–∏–Ω—É—Ç

interface AuthRequest extends Request {
  user?: {
    user_id: number;
    login: string;
  };
}

interface CreateAddressRequest {
  lat: number;
  lon: number;
  address: string;
  name: string;
  apartment?: string;
  entrance?: string;
  floor?: string;
  other?: string;
  city_id?: number;
}

interface UpdateAddressRequest {
  lat?: number;
  lon?: number;
  address?: string;
  name?: string;
  apartment?: string;
  entrance?: string;
  floor?: string;
  other?: string;
  city_id?: number;
}

export class AddressController {
  /**
   * –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã
   * GET /api/addresses/search?query=—É–ª–∏—Ü–∞+–ø—É—à–∫–∏–Ω–∞
   */
  static async searchAddresses(req: Request, res: Response, next: NextFunction) {
    try {
      console.log('üîç –ó–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤:', req.query);
      const { query } = req.query;

      if (!query || typeof query !== 'string') {
        console.log('‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä query');
        return next(createError(400, '–ü–∞—Ä–∞–º–µ—Ç—Ä query –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'));
      }

      console.log('üåç –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Yandex API –¥–ª—è –ø–æ–∏—Å–∫–∞:', query);

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Yandex API
      try {
        const endpoint = 'https://geocode-maps.yandex.ru/1.x';
        const params = {
          apikey: '7e1b6231-620b-4f24-87fa-c85027f630ab',
          geocode: query,
          format: 'json',
          lang: 'ru_RU'
         
        };

        const url = `${endpoint}?${new URLSearchParams(params)}`;
        console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Yandex API:', url);

        const response = await axios.get(url, {
          timeout: 1000 // 1 —Å–µ–∫—É–Ω–¥–∞ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ñ–µ–π–ª–±–µ–∫–∞
        });

        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Yandex API:', response.status);

        const geodata = response.data;
        
        if (!geodata?.response?.GeoObjectCollection?.featureMember) {
          throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API');
        }
        
        const items = geodata.response.GeoObjectCollection.featureMember;

        const formattedItems = items.map((item: any) => {
          const geoObject = item.GeoObject;
          const point = geoObject.Point.pos.split(' ');
          
          return {
            name: geoObject.metaDataProperty.GeocoderMetaData.Address.formatted,
            point: {
              lat: parseFloat(point[1]),
              lon: parseFloat(point[0])
            },
            description: geoObject.description || '',
            kind: geoObject.metaDataProperty.GeocoderMetaData.kind || 'house',
            precision: geoObject.metaDataProperty.GeocoderMetaData.precision || 'exact'
          };
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        const isRelevant = AddressController.checkResultsRelevance(query, formattedItems);
        
        if (!isRelevant) {
          console.log('üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Yandex API –Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
          throw new Error('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã –∑–∞–ø—Ä–æ—Å—É');
        }

        res.json({
          success: true,
          data: formattedItems,
          message: '–ê–¥—Ä–µ—Å–∞ –Ω–∞–π–¥–µ–Ω—ã'
        });

      } catch (apiError: any) {
        console.warn('‚ö†Ô∏è  Yandex API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É:', apiError.message);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        const mockData = AddressController.getMockAddressData(query.toString().toLowerCase());
        
        console.log('ÔøΩ –ò—â–µ–º –≤ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É:', `"${query.toString().toLowerCase()}"`);
        console.log('ÔøΩüì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', mockData.length, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤');
        
        res.json({
          success: true,
        //   data: mockData,
        //   message: mockData.length > 0 ? '–ê–¥—Ä–µ—Å–∞ –Ω–∞–π–¥–µ–Ω—ã (–ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞)' : '–ê–¥—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞)'
        });
      }

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤:', error);
      next(createError(500, `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤: ${error.message}`));
    }
  }

  /**
   * –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤
   */
  private static getMockAddressData(query: string): any[] {
    const mockAddresses: { [key: string]: any[] } = {
      '–º–æ—Å–∫–≤–∞': [
        {
          name: '–†–æ—Å—Å–∏—è, –ú–æ—Å–∫–≤–∞',
          point: { lat: 55.755864, lon: 37.617698 },
          description: '–°—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏',
          kind: 'locality',
          precision: 'exact'
        }
      ],
      '–∞–ª–º–∞—Ç—ã': [
        {
          name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –ê–ª–º–∞—Ç—ã',
          point: { lat: 43.238293, lon: 76.945465 },
          description: '–ö—Ä—É–ø–Ω–µ–π—à–∏–π –≥–æ—Ä–æ–¥ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞',
          kind: 'locality',
          precision: 'exact'
        }
      ],
      '–ø–∞–≤–ª–æ–¥–∞—Ä': [
        {
          name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –ü–∞–≤–ª–æ–¥–∞—Ä',
          point: { lat: 52.285446, lon: 76.970107 },
          description: '–ì–æ—Ä–æ–¥ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ',
          kind: 'locality',
          precision: 'exact'
        },
        {
          name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –ü–∞–≤–ª–æ–¥–∞—Ä, —É–ª–∏—Ü–∞ –ü–∞—Ö–æ–º–æ–≤–∞, 72',
          point: { lat: 52.2854, lon: 76.9701 },
          description: '–£–ª–∏—Ü–∞ –ü–∞—Ö–æ–º–æ–≤–∞, –ü–∞–≤–ª–æ–¥–∞—Ä, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
          kind: 'house',
          precision: 'exact'
        },
        {
          name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –ü–∞–≤–ª–æ–¥–∞—Ä, —É–ª–∏—Ü–∞ –ü–∞—Ö–æ–º–æ–≤–∞',
          point: { lat: 52.2850, lon: 76.9705 },
          description: '–£–ª–∏—Ü–∞ –≤ –ü–∞–≤–ª–æ–¥–∞—Ä–µ, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
          kind: 'street',
          precision: 'exact'
        }
      ],
      '–∞—Å—Ç–∞–Ω–∞': [
        {
          name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –ù—É—Ä-–°—É–ª—Ç–∞–Ω',
          point: { lat: 51.128422, lon: 71.430564 },
          description: '–°—Ç–æ–ª–∏—Ü–∞ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞',
          kind: 'locality',
          precision: 'exact'
        }
      ],
      '–ø—É—à–∫–∏–Ω–∞': [
        {
          name: '–†–æ—Å—Å–∏—è, –ú–æ—Å–∫–≤–∞, —É–ª–∏—Ü–∞ –ü—É—à–∫–∏–Ω–∞',
          point: { lat: 55.749792, lon: 37.632495 },
          description: '–£–ª–∏—Ü–∞ –≤ –ú–æ—Å–∫–≤–µ',
          kind: 'street',
          precision: 'exact'
        }
      ]
    };

    // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const queryWords = query.toLowerCase().split(/\s+/).filter(word => word.length > 2);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤
    for (const [key, addresses] of Object.entries(mockAddresses)) {
      if (query.toLowerCase().includes(key) || key.includes(query.toLowerCase())) {
        return addresses;
      }
    }

    // –ü–æ—Ç–æ–º –ø–æ–∏—Å–∫ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–ª–æ–≤–∞–º –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    for (const [key, addresses] of Object.entries(mockAddresses)) {
      const cityMatch = queryWords.some(word => word.includes(key) || key.includes(word));
      if (cityMatch) {
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞ –ø–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        const filteredAddresses = addresses.filter(addr => {
          const addrText = (addr.name + ' ' + addr.description).toLowerCase();
          return queryWords.some(word => addrText.includes(word));
        });
        
        if (filteredAddresses.length > 0) {
          return filteredAddresses;
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –≥–æ—Ä–æ–¥–∞
        return addresses;
      }
    }

    return [];
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
   */
  private static checkResultsRelevance(query: string, results: any[]): boolean {
    const queryLower = query.toLowerCase().trim();
    
    // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç, —Ç–æ –Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ
    if (!results || results.length === 0) {
      return false;
    }

    // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ
    const kazakhCities = ['–ø–∞–≤–ª–æ–¥–∞—Ä', '–∞–ª–º–∞—Ç—ã', '–∞—Å—Ç–∞–Ω–∞', '–Ω—É—Ä-—Å—É–ª—Ç–∞–Ω', '—à—ã–º–∫–µ–Ω—Ç', '–∫–∞—Ä–∞–≥–∞–Ω–¥–∞', '—Ç–∞—Ä–∞–∑', '–∞–∫—Ç–æ–±–µ', '—Å–µ–º–µ–π', '—É—Å—Ç—å-–∫–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫', '–∫—ã–∑—ã–ª–æ—Ä–¥–∞', '–∞—Ç—ã—Ä–∞—É', '–∫–æ—Å—Ç–∞–Ω–∞–π', '–∞–∫—Ç–∞—É', '–ø–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫'];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π –≥–æ—Ä–æ–¥
    const isKazakhQuery = kazakhCities.some(city => queryLower.includes(city));
    
    if (isKazakhQuery) {
      // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const hasKazakhResults = results.some(item => 
        item.name.toLowerCase().includes('–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω') || 
        item.description.toLowerCase().includes('–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω')
      );
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ - –Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ
      if (!hasKazakhResults) {
        return false;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∑–∞–ø—Ä–æ—Å–∞
    const queryWords = queryLower.split(/\s+/).filter(word => word.length > 2);
    
    if (queryWords.length === 0) {
      return true; // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–ª–æ–≤, —Å—á–∏—Ç–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º
    }

    // –°—á–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã 30% —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    let relevantCount = 0;
    
    for (const item of results) {
      const itemText = (item.name + ' ' + item.description).toLowerCase();
      const matchingWords = queryWords.filter(word => itemText.includes(word));
      
      if (matchingWords.length > 0) {
        relevantCount++;
      }
    }

    const relevanceRatio = relevantCount / results.length;
    return relevanceRatio >= 0.3; // –ú–∏–Ω–∏–º—É–º 30% —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * POST /api/addresses
   */
  static async addAddress(req: Request, res: Response, next: NextFunction) {
    try {
      const userId = (req as any).user.user_id;
      const { name, address, lat, lon, apartment, entrance, floor, other } = req.body;

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!name || !address || lat === undefined || lon === undefined) {
        return next(createError(400, '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: name, address, lat, lon'));
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      if (typeof lat !== 'number' || typeof lon !== 'number') {
        return next(createError(400, '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏'));
      }

      if (lat < -90 || lat > 90 || lon < -180 || lon > 180) {
        return next(createError(400, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'));
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å
      const newAddress = await prisma.user_addreses.create({
        data: {
          user_id: userId,
          name: name.trim(),
          address: address.trim(),
          lat: lat,
          lon: lon,
          apartment: apartment?.trim() || '',
          entrance: entrance?.trim() || '',
          floor: floor?.trim() || '',
          other: other?.trim() || ''
        }
      });

      res.status(201).json({
        success: true,
        data: newAddress,
        message: '–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω'
      });

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞:', error);
      next(createError(500, `–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: ${error.message}`));
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * PUT /api/addresses/:id
   */
  static async updateAddress(req: Request, res: Response, next: NextFunction) {
    try {
      const userId = (req as any).user.user_id;
      const addressId = parseInt(req.params.id);
      const { name, address, lat, lon, apartment, entrance, floor, other } = req.body;

      if (!addressId || isNaN(addressId)) {
        return next(createError(400, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–¥—Ä–µ—Å–∞'));
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const existingAddress = await prisma.user_addreses.findFirst({
        where: {
          address_id: addressId,
          user_id: userId
        }
      });

      if (!existingAddress) {
        return next(createError(404, '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'));
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const updateData: any = {};

      if (name !== undefined) {
        if (!name.trim()) {
          return next(createError(400, '–ù–∞–∑–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'));
        }
        updateData.name = name.trim();
      }

      if (address !== undefined) {
        if (!address.trim()) {
          return next(createError(400, '–ê–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'));
        }
        updateData.address = address.trim();
      }

      if (lat !== undefined) {
        if (typeof lat !== 'number' || lat < -90 || lat > 90) {
          return next(createError(400, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —à–∏—Ä–æ—Ç–∞'));
        }
        updateData.lat = lat;
      }

      if (lon !== undefined) {
        if (typeof lon !== 'number' || lon < -180 || lon > 180) {
          return next(createError(400, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–æ–ª–≥–æ—Ç–∞'));
        }
        updateData.lon = lon;
      }

      if (apartment !== undefined) {
        updateData.apartment = apartment?.trim() || '';
      }

      if (entrance !== undefined) {
        updateData.entrance = entrance?.trim() || '';
      }

      if (floor !== undefined) {
        updateData.floor = floor?.trim() || '';
      }

      if (other !== undefined) {
        updateData.other = other?.trim() || '';
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å
      const updatedAddress = await prisma.user_addreses.update({
        where: { address_id: addressId },
        data: updateData
      });

      res.json({
        success: true,
        data: updatedAddress,
        message: '–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
      });

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞:', error);
      next(createError(500, `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: ${error.message}`));
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * DELETE /api/addresses/:id
   */
  static async deleteAddress(req: Request, res: Response, next: NextFunction) {
    try {
      const userId = (req as any).user.user_id;
      const addressId = parseInt(req.params.id);

      if (!addressId || isNaN(addressId)) {
        return next(createError(400, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–¥—Ä–µ—Å–∞'));
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const existingAddress = await prisma.user_addreses.findFirst({
        where: {
          address_id: addressId,
          user_id: userId
        }
      });

      if (!existingAddress) {
        return next(createError(404, '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'));
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –∞–¥—Ä–µ—Å –≤ –∑–∞–∫–∞–∑–∞—Ö
      const ordersWithAddress = await prisma.orders.findFirst({
        where: {
          address_id: addressId,
          user_id: userId
        }
      });

      if (ordersWithAddress) {
        return next(createError(400, '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –≤ –∑–∞–∫–∞–∑–∞—Ö'));
      }

      // –£–¥–∞–ª—è–µ–º –∞–¥—Ä–µ—Å
      await prisma.user_addreses.delete({
        where: { address_id: addressId }
      });

      res.json({
        success: true,
        data: { address_id: addressId },
        message: '–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
      });

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞:', error);
      next(createError(500, `–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: ${error.message}`));
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * GET /api/addresses/:id
   */
  static async getAddress(req: Request, res: Response, next: NextFunction) {
    try {
      const userId = (req as any).user.user_id;
      const addressId = parseInt(req.params.id);

      if (!addressId || isNaN(addressId)) {
        return next(createError(400, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–¥—Ä–µ—Å–∞'));
      }

      const address = await prisma.user_addreses.findFirst({
        where: {
          address_id: addressId,
          user_id: userId
        }
      });

      if (!address) {
        return next(createError(404, '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'));
      }

      res.json({
        success: true,
        data: address,
        message: '–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω'
      });

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞:', error);
      next(createError(500, `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: ${error.message}`));
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * GET /api/addresses/user
   */
  static async getUserAddresses(req: AuthRequest, res: Response, next: NextFunction) {
    try {
      if (!req.user) {
        return next(createError(401, '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'));
      }

      const addresses = await prisma.user_addreses.findMany({
        where: {
          user_id: req.user.user_id,
          isDeleted: 0
        },
        orderBy: {
          log_timestamp: 'desc'
        }
      });

      res.json({
        success: true,
        data: {
          addresses: addresses.map(address => ({
            address_id: address.address_id,
            lat: address.lat,
            lon: address.lon,
            address: address.address,
            name: address.name,
            apartment: address.apartment,
            entrance: address.entrance,
            floor: address.floor,
            other: address.other,
            city_id: address.city_id,
            created_at: address.log_timestamp
          }))
        },
        message: `–ù–∞–π–¥–µ–Ω–æ ${addresses.length} –∞–¥—Ä–µ—Å–æ–≤`
      });

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤:', error);
      next(createError(500, `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤: ${error.message}`));
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
   * GET /api/addresses/user/:id?business_id=1
   */
  static async getUserAddressById(req: AuthRequest, res: Response, next: NextFunction) {
    try {
      if (!req.user) {
        return next(createError(401, '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'));
      }

      const addressId = parseInt(req.params.id);
      const businessId = req.query.business_id ? parseInt(req.query.business_id as string) : null;
      
      if (isNaN(addressId)) {
        return next(createError(400, '–ù–µ–≤–µ—Ä–Ω—ã–π ID –∞–¥—Ä–µ—Å–∞'));
      }

      const address = await prisma.user_addreses.findFirst({
        where: {
          address_id: addressId,
          user_id: req.user.user_id,
          isDeleted: 0
        }
      });

      if (!address) {
        return next(createError(404, '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'));
      }

      let deliveryInfo = null;

      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω business_id, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞–≤–∫—É
      if (businessId && address.lat && address.lon) {
        const cacheKey = `delivery_${businessId}_${address.lat}_${address.lon}_${address.address_id}`;
        const cachedResult = deliveryCache.get(cacheKey);
        
        if (cachedResult && (Date.now() - cachedResult.timestamp) < CACHE_TTL) {
          deliveryInfo = cachedResult.data;
        } else {
          try {
            const { DeliveryController } = await import('./deliveryController');
            
            const deliveryResult = await DeliveryController.calculateDeliveryZone({
              lat: Number(address.lat),
              lon: Number(address.lon),
              business_id: businessId,
              address_id: address.address_id
            });

            deliveryInfo = {
              available: deliveryResult.in_zone,
              price: deliveryResult.price,
              delivery_type: deliveryResult.delivery_type,
              message: deliveryResult.message,
              distance: deliveryResult.current_distance
            };

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            deliveryCache.set(cacheKey, {
              data: deliveryInfo,
              timestamp: Date.now()
            });

          } catch (deliveryError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:', deliveryError);
            deliveryInfo = {
              available: false,
              price: false,
              message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏',
              distance: null
            };
          }
        }
      }

      const responseData: any = {
        address: {
          address_id: address.address_id,
          lat: address.lat,
          lon: address.lon,
          address: address.address,
          name: address.name,
          apartment: address.apartment,
          entrance: address.entrance,
          floor: address.floor,
          other: address.other,
          city_id: address.city_id,
          created_at: address.log_timestamp
        }
      };

      if (deliveryInfo) {
        responseData.address.delivery = deliveryInfo;
        responseData.business_id = businessId;
      }

      res.json({
        success: true,
        data: responseData,
        message: deliveryInfo ? '–ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç–∞–≤–∫–µ' : '–ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω'
      });

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞:', error);
      next(createError(500, `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: ${error.message}`));
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π)
   * GET /api/addresses/user/selected?business_id=1
   */
  static async getSelectedAddress(req: AuthRequest, res: Response, next: NextFunction) {
    try {
      if (!req.user) {
        return next(createError(401, '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'));
      }

      const businessId = req.query.business_id ? parseInt(req.query.business_id as string) : null;

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
      const selectedRecord = await prisma.selected_address.findFirst({
        where: {
          user_id: req.user.user_id
        },
        orderBy: {
          log_timestamp: 'desc'
        }
      });

      if (!selectedRecord) {
        return next(createError(404, '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞'));
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥—Ä–µ—Å–µ
      const address = await prisma.user_addreses.findFirst({
        where: {
          address_id: selectedRecord.address_id,
          user_id: req.user.user_id,
          isDeleted: 0
        }
      });

      if (!address) {
        return next(createError(404, '–í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω'));
      }

      let deliveryInfo = null;

      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω business_id, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞–≤–∫—É
      if (businessId && address.lat && address.lon) {
        const cacheKey = `delivery_${businessId}_${address.lat}_${address.lon}_${address.address_id}`;
        const cachedResult = deliveryCache.get(cacheKey);
        
        if (cachedResult && (Date.now() - cachedResult.timestamp) < CACHE_TTL) {
          deliveryInfo = cachedResult.data;
        } else {
          try {
            const { DeliveryController } = await import('./deliveryController');
            
            const deliveryResult = await DeliveryController.calculateDeliveryZone({
              lat: Number(address.lat),
              lon: Number(address.lon),
              business_id: businessId,
              address_id: address.address_id
            });

            deliveryInfo = {
              available: deliveryResult.in_zone,
              price: deliveryResult.price,
              delivery_type: deliveryResult.delivery_type,
              message: deliveryResult.message,
              distance: deliveryResult.current_distance
            };

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            deliveryCache.set(cacheKey, {
              data: deliveryInfo,
              timestamp: Date.now()
            });

          } catch (deliveryError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:', deliveryError);
            deliveryInfo = {
              available: false,
              price: false,
              message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏',
              distance: null
            };
          }
        }
      }

      const responseData: any = {
        selected_address: {
          address_id: address.address_id,
          lat: address.lat,
          lon: address.lon,
          address: address.address,
          name: address.name,
          apartment: address.apartment,
          entrance: address.entrance,
          floor: address.floor,
          other: address.other,
          city_id: address.city_id,
          created_at: address.log_timestamp,
          selected_at: selectedRecord.log_timestamp
        }
      };

      if (deliveryInfo) {
        responseData.selected_address.delivery = deliveryInfo;
        responseData.business_id = businessId;
      }

      res.json({
        success: true,
        data: responseData,
        message: deliveryInfo ? '–í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç–∞–≤–∫–µ' : '–í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω'
      });

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞:', error);
      next(createError(500, `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞: ${error.message}`));
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * POST /api/addresses/user/select
   * Body: { address_id: number }
   */
  static async selectAddress(req: AuthRequest, res: Response, next: NextFunction) {
    try {
      if (!req.user) {
        return next(createError(401, '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'));
      }

      const { address_id } = req.body;

      if (!address_id || isNaN(parseInt(address_id))) {
        return next(createError(400, '–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π address_id'));
      }

      const addressId = parseInt(address_id);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const address = await prisma.user_addreses.findFirst({
        where: {
          address_id: addressId,
          user_id: req.user.user_id,
          isDeleted: 0
        }
      });

      if (!address) {
        return next(createError(404, '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'));
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∞–¥—Ä–µ—Å–µ
      const selectedAddress = await prisma.selected_address.create({
        data: {
          user_id: req.user.user_id,
          address_id: addressId
        }
      });

      res.json({
        success: true,
        data: {
          selected_address_id: selectedAddress.relation_id,
          address_id: addressId,
          user_id: req.user.user_id,
          selected_at: selectedAddress.log_timestamp
        },
        message: '–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω'
      });

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞:', error);
      next(createError(500, `–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞: ${error.message}`));
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞
   * POST /api/addresses/user
   */
  static async createUserAddress(req: AuthRequest, res: Response, next: NextFunction) {
    try {
      if (!req.user) {
        return next(createError(401, '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'));
      }

      const {
        lat,
        lon,
        address,
        name,
        apartment = '',
        entrance = '',
        floor = '',
        other = '',
        city_id
      }: CreateAddressRequest = req.body;

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!lat || !lon || !address || !name) {
        return next(createError(400, '–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: lat, lon, address, name'));
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      if (lat < -90 || lat > 90 || lon < -180 || lon > 180) {
        return next(createError(400, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'));
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–∏–º–∏—Ç)
      const existingAddresses = await prisma.user_addreses.count({
        where: {
          user_id: req.user.user_id,
          isDeleted: 0
        }
      });

      if (existingAddresses >= 10) {
        return next(createError(400, '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∞–¥—Ä–µ—Å–æ–≤ (–º–∞–∫—Å–∏–º—É–º 10)'));
      }

      const newAddress = await prisma.user_addreses.create({
        data: {
          user_id: req.user.user_id,
          lat: lat,
          lon: lon,
          address: address.trim(),
          name: name.trim(),
          apartment: apartment.trim(),
          entrance: entrance.trim(),
          floor: floor.trim(),
          other: other.trim(),
          city_id: city_id || null,
          log_timestamp: new Date()
        }
      });

      res.status(201).json({
        success: true,
        data: {
          address: {
            address_id: newAddress.address_id,
            lat: newAddress.lat,
            lon: newAddress.lon,
            address: newAddress.address,
            name: newAddress.name,
            apartment: newAddress.apartment,
            entrance: newAddress.entrance,
            floor: newAddress.floor,
            other: newAddress.other,
            city_id: newAddress.city_id,
            created_at: newAddress.log_timestamp
          }
        },
        message: '–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
      });

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞:', error);
      next(createError(500, `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞: ${error.message}`));
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
   * PUT /api/addresses/user/:id
   */
  static async updateUserAddress(req: AuthRequest, res: Response, next: NextFunction) {
    try {
      if (!req.user) {
        return next(createError(401, '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'));
      }

      const addressId = parseInt(req.params.id);
      if (isNaN(addressId)) {
        return next(createError(400, '–ù–µ–≤–µ—Ä–Ω—ã–π ID –∞–¥—Ä–µ—Å–∞'));
      }

      const {
        lat,
        lon,
        address,
        name,
        apartment,
        entrance,
        floor,
        other,
        city_id
      }: UpdateAddressRequest = req.body;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
      const existingAddress = await prisma.user_addreses.findFirst({
        where: {
          address_id: addressId,
          user_id: req.user.user_id,
          isDeleted: 0
        }
      });

      if (!existingAddress) {
        return next(createError(404, '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'));
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã)
      if ((lat !== undefined && (lat < -90 || lat > 90)) || 
          (lon !== undefined && (lon < -180 || lon > 180))) {
        return next(createError(400, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'));
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const updateData: any = {};
      if (lat !== undefined) updateData.lat = lat;
      if (lon !== undefined) updateData.lon = lon;
      if (address !== undefined) updateData.address = address.trim();
      if (name !== undefined) updateData.name = name.trim();
      if (apartment !== undefined) updateData.apartment = apartment.trim();
      if (entrance !== undefined) updateData.entrance = entrance.trim();
      if (floor !== undefined) updateData.floor = floor.trim();
      if (other !== undefined) updateData.other = other.trim();
      if (city_id !== undefined) updateData.city_id = city_id;

      const updatedAddress = await prisma.user_addreses.update({
        where: { address_id: addressId },
        data: updateData
      });

      res.json({
        success: true,
        data: {
          address: {
            address_id: updatedAddress.address_id,
            lat: updatedAddress.lat,
            lon: updatedAddress.lon,
            address: updatedAddress.address,
            name: updatedAddress.name,
            apartment: updatedAddress.apartment,
            entrance: updatedAddress.entrance,
            floor: updatedAddress.floor,
            other: updatedAddress.other,
            city_id: updatedAddress.city_id,
            created_at: updatedAddress.log_timestamp
          }
        },
        message: '–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
      });

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞:', error);
      next(createError(500, `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: ${error.message}`));
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
   * DELETE /api/addresses/user/:id
   */
  static async deleteUserAddress(req: AuthRequest, res: Response, next: NextFunction) {
    try {
      if (!req.user) {
        return next(createError(401, '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'));
      }

      const addressId = parseInt(req.params.id);
      if (isNaN(addressId)) {
        return next(createError(400, '–ù–µ–≤–µ—Ä–Ω—ã–π ID –∞–¥—Ä–µ—Å–∞'));
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
      const existingAddress = await prisma.user_addreses.findFirst({
        where: {
          address_id: addressId,
          user_id: req.user.user_id,
          isDeleted: 0
        }
      });

      if (!existingAddress) {
        return next(createError(404, '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'));
      }

      // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
      await prisma.user_addreses.update({
        where: { address_id: addressId },
        data: { isDeleted: 1 }
      });

      res.json({
        success: true,
        data: { address_id: addressId },
        message: '–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
      });

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞:', error);
      next(createError(500, `–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: ${error.message}`));
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –∞–¥—Ä–µ—Å—É
   * POST /api/addresses/check-delivery
   */
  static async checkDeliveryAvailability(req: AuthRequest, res: Response, next: NextFunction) {
    try {
      const { lat, lon, business_id } = req.body;

      if (!lat || !lon || !business_id) {
        return next(createError(400, '–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: lat, lon, business_id'));
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      if (lat < -90 || lat > 90 || lon < -180 || lon > 180) {
        return next(createError(400, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'));
      }

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º DeliveryController –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏
      const { DeliveryController } = await import('./deliveryController');
      
      const deliveryResult = await DeliveryController.calculateDeliveryZone({
        lat: Number(lat),
        lon: Number(lon),
        business_id: Number(business_id)
      });

      res.json({
        success: true,
        data: {
          delivery_available: deliveryResult.in_zone,
          delivery_price: deliveryResult.price,
          delivery_type: deliveryResult.delivery_type,
          message: deliveryResult.message,
          max_distance: deliveryResult.max_distance,
          current_distance: deliveryResult.current_distance
        },
        message: deliveryResult.in_zone ? '–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞' : '–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
      });

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:', error);
      next(createError(500, `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: ${error.message}`));
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç–∞–≤–∫–µ
   * GET /api/addresses/user/with-delivery?business_id=1
   */
  static async getUserAddressesWithDelivery(req: AuthRequest, res: Response, next: NextFunction) {
    const startTime = Date.now();
    try {
      if (!req.user) {
        return next(createError(401, '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'));
      }

      const businessId = req.query.business_id ? parseInt(req.query.business_id as string) : null;
      const limit = req.query.limit ? Math.min(parseInt(req.query.limit as string), 50) : 20; // –ú–∞–∫—Å–∏–º—É–º 50 –∞–¥—Ä–µ—Å–æ–≤

      console.log(`üìç –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user.user_id} —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ ${businessId}`);

      const addresses = await prisma.user_addreses.findMany({
        where: {
          user_id: req.user.user_id,
          isDeleted: 0
        },
        orderBy: {
          log_timestamp: 'desc'
        },
        take: limit // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤–º–µ—Å—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
      const addressesWithDeliveryPromises = addresses.map(async (address) => {
        let deliveryInfo = null;

        if (businessId && address.lat && address.lon) {
          // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –∫–µ—à–∞
          const cacheKey = `delivery_${businessId}_${address.lat}_${address.lon}_${address.address_id}`;
          const cachedResult = deliveryCache.get(cacheKey);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
          if (cachedResult && (Date.now() - cachedResult.timestamp) < CACHE_TTL) {
            console.log(`üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à –¥–ª—è –∞–¥—Ä–µ—Å–∞ ${address.address_id}`);
            deliveryInfo = cachedResult.data;
          } else {
            try {
              const { DeliveryController } = await import('./deliveryController');
              
              const deliveryResult = await DeliveryController.calculateDeliveryZone({
                lat: Number(address.lat),
                lon: Number(address.lon),
                business_id: businessId,
                address_id: address.address_id // –ü–µ—Ä–µ–¥–∞–µ–º address_id –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
              });

              deliveryInfo = {
                available: deliveryResult.in_zone,
                price: deliveryResult.price,
                delivery_type: deliveryResult.delivery_type,
                message: deliveryResult.message,
                distance: deliveryResult.current_distance
              };

              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
              deliveryCache.set(cacheKey, {
                data: deliveryInfo,
                timestamp: Date.now()
              });

            } catch (deliveryError) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∞–¥—Ä–µ—Å–∞:', address.address_id, deliveryError);
              deliveryInfo = {
                available: false,
                price: false,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏',
                distance: null
              };
            }
          }
        }

        return {
          address_id: address.address_id,
          lat: address.lat,
          lon: address.lon,
          address: address.address,
          name: address.name,
          apartment: address.apartment,
          entrance: address.entrance,
          floor: address.floor,
          other: address.other,
          city_id: address.city_id,
          created_at: address.log_timestamp,
          delivery: deliveryInfo
        };
      });

      // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      const addressesWithDelivery = await Promise.all(addressesWithDeliveryPromises);

      const executionTime = Date.now() - startTime;
      console.log(`‚ö° –ó–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–æ–≤ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${executionTime}–º—Å`);

      res.json({
        success: true,
        data: {
          addresses: addressesWithDelivery,
          business_id: businessId,
          execution_time_ms: executionTime
        },
        message: `–ù–∞–π–¥–µ–Ω–æ ${addresses.length} –∞–¥—Ä–µ—Å–æ–≤`
      });

    } catch (error: any) {
      const executionTime = Date.now() - startTime;
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç–∞–≤–∫–µ (${executionTime}–º—Å):`, error);
      next(createError(500, `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤: ${error.message}`));
    }
  }
}
