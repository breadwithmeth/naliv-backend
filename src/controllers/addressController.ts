import { Request, Response, NextFunction } from 'express';
import { PrismaClient } from '@prisma/client';
import { createError } from '../middleware/errorHandler';
import axios from 'axios';

const prisma = new PrismaClient();

export class AddressController {
  /**
   * –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã
   * GET /api/addresses/search?query=—É–ª–∏—Ü–∞+–ø—É—à–∫–∏–Ω–∞
   */
  static async searchAddresses(req: Request, res: Response, next: NextFunction) {
    try {
      console.log('üîç –ó–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤:', req.query);
      const { query } = req.query;

      if (!query || typeof query !== 'string') {
        console.log('‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä query');
        return next(createError(400, '–ü–∞—Ä–∞–º–µ—Ç—Ä query –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'));
      }

      console.log('üåç –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Yandex API –¥–ª—è –ø–æ–∏—Å–∫–∞:', query);

      // –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Nominatim
      try {
        const endpoint = 'http://68.183.23.112:8080/search.php';
        const params = {
          q: query as string,
          addressdetails: '1',
          namedetails: '1',
          format: 'geocodejson'

        };
        const url = `${endpoint}?${new URLSearchParams(params)}`;
        console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Nominatim:', url);

        const response = await axios.get(url, { timeout: 2000, headers: { 'Accept-Language': 'ru' } });
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Nominatim:', response.status);
        console.log('üìä –î–∞–Ω–Ω—ã–µ –æ—Ç Nominatim:', response.data);
        
        

        res.json({
          success: true,
          data: response.data,
        });

      } catch (apiError: any) {
        console.warn('‚ö†Ô∏è  Nominatim –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É:', apiError.message);
        const mockData = AddressController.getMockAddressData((query as string).toLowerCase());
        res.json({
          success: true,
          data: mockData,
          message: mockData.length > 0 ? '–ê–¥—Ä–µ—Å–∞ –Ω–∞–π–¥–µ–Ω—ã (–ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞)' : '–ê–¥—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞)'
        });
      }

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤:', error);
      next(createError(500, `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤: ${error.message}`));
    }
  }

  /**
   * –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤
   */
  private static getMockAddressData(query: string): any[] {
    const mockAddresses: { [key: string]: any[] } = {
      '–º–æ—Å–∫–≤–∞': [
        {
          name: '–†–æ—Å—Å–∏—è, –ú–æ—Å–∫–≤–∞',
          point: { lat: 55.755864, lon: 37.617698 },
          description: '–°—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏',
          kind: 'locality',
          precision: 'exact'
        }
      ],
      '–∞–ª–º–∞—Ç—ã': [
        {
          name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –ê–ª–º–∞—Ç—ã',
          point: { lat: 43.238293, lon: 76.945465 },
          description: '–ö—Ä—É–ø–Ω–µ–π—à–∏–π –≥–æ—Ä–æ–¥ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞',
          kind: 'locality',
          precision: 'exact'
        }
      ],
      '–ø–∞–≤–ª–æ–¥–∞—Ä': [
        {
          name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –ü–∞–≤–ª–æ–¥–∞—Ä',
          point: { lat: 52.285446, lon: 76.970107 },
          description: '–ì–æ—Ä–æ–¥ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ',
          kind: 'locality',
          precision: 'exact'
        },
        {
          name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –ü–∞–≤–ª–æ–¥–∞—Ä, —É–ª–∏—Ü–∞ –ü–∞—Ö–æ–º–æ–≤–∞, 72',
          point: { lat: 52.2854, lon: 76.9701 },
          description: '–£–ª–∏—Ü–∞ –ü–∞—Ö–æ–º–æ–≤–∞, –ü–∞–≤–ª–æ–¥–∞—Ä, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
          kind: 'house',
          precision: 'exact'
        },
        {
          name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –ü–∞–≤–ª–æ–¥–∞—Ä, —É–ª–∏—Ü–∞ –ü–∞—Ö–æ–º–æ–≤–∞',
          point: { lat: 52.2850, lon: 76.9705 },
          description: '–£–ª–∏—Ü–∞ –≤ –ü–∞–≤–ª–æ–¥–∞—Ä–µ, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
          kind: 'street',
          precision: 'exact'
        }
      ],
      '–∞—Å—Ç–∞–Ω–∞': [
        {
          name: '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –ù—É—Ä-–°—É–ª—Ç–∞–Ω',
          point: { lat: 51.128422, lon: 71.430564 },
          description: '–°—Ç–æ–ª–∏—Ü–∞ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞',
          kind: 'locality',
          precision: 'exact'
        }
      ],
      '–ø—É—à–∫–∏–Ω–∞': [
        {
          name: '–†–æ—Å—Å–∏—è, –ú–æ—Å–∫–≤–∞, —É–ª–∏—Ü–∞ –ü—É—à–∫–∏–Ω–∞',
          point: { lat: 55.749792, lon: 37.632495 },
          description: '–£–ª–∏—Ü–∞ –≤ –ú–æ—Å–∫–≤–µ',
          kind: 'street',
          precision: 'exact'
        }
      ]
    };

    // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const queryWords = query.toLowerCase().split(/\s+/).filter(word => word.length > 2);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤
    for (const [key, addresses] of Object.entries(mockAddresses)) {
      if (query.toLowerCase().includes(key) || key.includes(query.toLowerCase())) {
        return addresses;
      }
    }

    // –ü–æ—Ç–æ–º –ø–æ–∏—Å–∫ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–ª–æ–≤–∞–º –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    for (const [key, addresses] of Object.entries(mockAddresses)) {
      const cityMatch = queryWords.some(word => word.includes(key) || key.includes(word));
      if (cityMatch) {
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞ –ø–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        const filteredAddresses = addresses.filter(addr => {
          const addrText = (addr.name + ' ' + addr.description).toLowerCase();
          return queryWords.some(word => addrText.includes(word));
        });
        
        if (filteredAddresses.length > 0) {
          return filteredAddresses;
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –≥–æ—Ä–æ–¥–∞
        return addresses;
      }
    }

    return [];
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
   */
  private static checkResultsRelevance(query: string, results: any[]): boolean {
    const queryLower = query.toLowerCase().trim();
    
    // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç, —Ç–æ –Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ
    if (!results || results.length === 0) {
      return false;
    }

    // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ
    const kazakhCities = ['–ø–∞–≤–ª–æ–¥–∞—Ä', '–∞–ª–º–∞—Ç—ã', '–∞—Å—Ç–∞–Ω–∞', '–Ω—É—Ä-—Å—É–ª—Ç–∞–Ω', '—à—ã–º–∫–µ–Ω—Ç', '–∫–∞—Ä–∞–≥–∞–Ω–¥–∞', '—Ç–∞—Ä–∞–∑', '–∞–∫—Ç–æ–±–µ', '—Å–µ–º–µ–π', '—É—Å—Ç—å-–∫–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫', '–∫—ã–∑—ã–ª–æ—Ä–¥–∞', '–∞—Ç—ã—Ä–∞—É', '–∫–æ—Å—Ç–∞–Ω–∞–π', '–∞–∫—Ç–∞—É', '–ø–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫'];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π –≥–æ—Ä–æ–¥
    const isKazakhQuery = kazakhCities.some(city => queryLower.includes(city));
    
    if (isKazakhQuery) {
      // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const hasKazakhResults = results.some(item => 
        item.name.toLowerCase().includes('–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω') || 
        item.description.toLowerCase().includes('–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω')
      );
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ - –Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ
      if (!hasKazakhResults) {
        return false;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∑–∞–ø—Ä–æ—Å–∞
    const queryWords = queryLower.split(/\s+/).filter(word => word.length > 2);
    
    if (queryWords.length === 0) {
      return true; // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–ª–æ–≤, —Å—á–∏—Ç–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º
    }

    // –°—á–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã 30% —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    let relevantCount = 0;
    
    for (const item of results) {
      const itemText = (item.name + ' ' + item.description).toLowerCase();
      const matchingWords = queryWords.filter(word => itemText.includes(word));
      
      if (matchingWords.length > 0) {
        relevantCount++;
      }
    }

    const relevanceRatio = relevantCount / results.length;
    return relevanceRatio >= 0.3; // –ú–∏–Ω–∏–º—É–º 30% —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * GET /api/addresses
   */
  static async getUserAddresses(req: Request, res: Response, next: NextFunction) {
    try {
      const userId = (req as any).user.user_id;

      const addresses = await prisma.user_addreses.findMany({
        where: { user_id: userId },
        orderBy: { address_id: 'desc' }
      });

      res.json({
        success: true,
        data: addresses,
        message: '–ê–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–µ–Ω—ã'
      });

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤:', error);
      next(createError(500, `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤: ${error.message}`));
    }
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * POST /api/addresses
   */
  static async addAddress(req: Request, res: Response, next: NextFunction) {
    try {
      const userId = (req as any).user.user_id;
      const { name, address, lat, lon, apartment, entrance, floor, other } = req.body;

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!name || !address || lat === undefined || lon === undefined) {
        return next(createError(400, '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: name, address, lat, lon'));
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      if (typeof lat !== 'number' || typeof lon !== 'number') {
        return next(createError(400, '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏'));
      }

      if (lat < -90 || lat > 90 || lon < -180 || lon > 180) {
        return next(createError(400, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'));
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å
      const newAddress = await prisma.user_addreses.create({
        data: {
          user_id: userId,
          name: name.trim(),
          address: address.trim(),
          lat: lat,
          lon: lon,
          apartment: apartment?.trim() || '',
          entrance: entrance?.trim() || '',
          floor: floor?.trim() || '',
          other: other?.trim() || ''
        }
      });

      res.status(201).json({
        success: true,
        data: newAddress,
        message: '–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω'
      });

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞:', error);
      next(createError(500, `–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: ${error.message}`));
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * PUT /api/addresses/:id
   */
  static async updateAddress(req: Request, res: Response, next: NextFunction) {
    try {
      const userId = (req as any).user.user_id;
      const addressId = parseInt(req.params.id);
      const { name, address, lat, lon, apartment, entrance, floor, other } = req.body;

      if (!addressId || isNaN(addressId)) {
        return next(createError(400, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–¥—Ä–µ—Å–∞'));
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const existingAddress = await prisma.user_addreses.findFirst({
        where: {
          address_id: addressId,
          user_id: userId
        }
      });

      if (!existingAddress) {
        return next(createError(404, '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'));
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const updateData: any = {};

      if (name !== undefined) {
        if (!name.trim()) {
          return next(createError(400, '–ù–∞–∑–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'));
        }
        updateData.name = name.trim();
      }

      if (address !== undefined) {
        if (!address.trim()) {
          return next(createError(400, '–ê–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'));
        }
        updateData.address = address.trim();
      }

      if (lat !== undefined) {
        if (typeof lat !== 'number' || lat < -90 || lat > 90) {
          return next(createError(400, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —à–∏—Ä–æ—Ç–∞'));
        }
        updateData.lat = lat;
      }

      if (lon !== undefined) {
        if (typeof lon !== 'number' || lon < -180 || lon > 180) {
          return next(createError(400, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–æ–ª–≥–æ—Ç–∞'));
        }
        updateData.lon = lon;
      }

      if (apartment !== undefined) {
        updateData.apartment = apartment?.trim() || '';
      }

      if (entrance !== undefined) {
        updateData.entrance = entrance?.trim() || '';
      }

      if (floor !== undefined) {
        updateData.floor = floor?.trim() || '';
      }

      if (other !== undefined) {
        updateData.other = other?.trim() || '';
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å
      const updatedAddress = await prisma.user_addreses.update({
        where: { address_id: addressId },
        data: updateData
      });

      res.json({
        success: true,
        data: updatedAddress,
        message: '–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
      });

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞:', error);
      next(createError(500, `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: ${error.message}`));
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * DELETE /api/addresses/:id
   */
  static async deleteAddress(req: Request, res: Response, next: NextFunction) {
    try {
      const userId = (req as any).user.user_id;
      const addressId = parseInt(req.params.id);

      if (!addressId || isNaN(addressId)) {
        return next(createError(400, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–¥—Ä–µ—Å–∞'));
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const existingAddress = await prisma.user_addreses.findFirst({
        where: {
          address_id: addressId,
          user_id: userId
        }
      });

      if (!existingAddress) {
        return next(createError(404, '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'));
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –∞–¥—Ä–µ—Å –≤ –∑–∞–∫–∞–∑–∞—Ö
      const ordersWithAddress = await prisma.orders.findFirst({
        where: {
          address_id: addressId,
          user_id: userId
        }
      });

      if (ordersWithAddress) {
        return next(createError(400, '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –≤ –∑–∞–∫–∞–∑–∞—Ö'));
      }

      // –£–¥–∞–ª—è–µ–º –∞–¥—Ä–µ—Å
      await prisma.user_addreses.delete({
        where: { address_id: addressId }
      });

      res.json({
        success: true,
        data: { address_id: addressId },
        message: '–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
      });

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞:', error);
      next(createError(500, `–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: ${error.message}`));
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * GET /api/addresses/:id
   */
  static async getAddress(req: Request, res: Response, next: NextFunction) {
    try {
      const userId = (req as any).user.user_id;
      const addressId = parseInt(req.params.id);

      if (!addressId || isNaN(addressId)) {
        return next(createError(400, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–¥—Ä–µ—Å–∞'));
      }

      const address = await prisma.user_addreses.findFirst({
        where: {
          address_id: addressId,
          user_id: userId
        }
      });

      if (!address) {
        return next(createError(404, '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'));
      }

      res.json({
        success: true,
        data: address,
        message: '–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω'
      });

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞:', error);
      next(createError(500, `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: ${error.message}`));
    }
  }

  /**
   * –û–±—Ä–∞—Ç–Ω—ã–π –≥–µ–æ–∫–æ–¥–∏–Ω–≥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
   * GET /api/addresses/reverse?lat={lat}&lon={lon}
   */
  static async reverseGeocode(req: Request, res: Response, next: NextFunction) {
    try {
      const { lat, lon } = req.query;
      if (!lat || !lon || isNaN(Number(lat)) || isNaN(Number(lon))) {
        return next(createError(400, '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã lat –∏ lon –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω—ã –∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏'));
      }
      const endpoint = 'http://68.183.23.112:8080/reverse.php';
      const params = {
        lat: lat as string,
        lon: lon as string,
        format: 'geocodejson',
        addressdetails: '1',
        namedetails: '1'
      };
      const url = `${endpoint}?${new URLSearchParams(params)}`;
      console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Nominatim reverse:', url);
      const response = await axios.get(url, { timeout: 2000, headers: { 'Accept-Language': 'ru' } });
      console.log('‚úÖ –û—Ç–≤–µ—Ç Nominatim reverse:', response.status);
      const data = response.data;
      
      
      res.json({
        success: true,
        data: data,
        message: '–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º'
      });
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞:', error);
      next(createError(500, `–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`));
    }
  }
}
